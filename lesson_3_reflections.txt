1. When would you want to use a remote repository rather than keeping all your work local?
Using a remote repository is useful if you are working from multiple computers, because 
then you can access your repo from any of them, or if you are collaborating with others
as they will be able to access the repo and make changes from their own machines.

Commands:
git add remote remonte_name url
Adds a remote link to your repository.
The url is the url of your repo on github.
Once this is done you can push your commits
up to your github repository.

git push remote branch
This command pushes the branch "branch" up
to the chosen remote. Note that when pushing
changes to your remote you do it in terms of
branches, rather than individual commits.

git pull remote branch
This command pulls down the chosen branch 
from remote on github.

2. Why might you want to always pull changes manually rather than having Git
automatically stay up to date with your remote repository?
Your remote repository may have additions / changes by other contributors
that you don't want to include in your commit, so you don't want it to 
be getting constantly updated with changes while you're working on it.

3. Describe the differences between forks, clones and branches. When
would you use one instead of the other?
Branch: branches exist within a repository. They are seperate chains
of commits. Branches are used to experiment, add new features, change functionalities
etc from the master branch, which is like your always stable, always working
production branch. You can merge branches together to combine the changes
and commit histories of your branches.

Clone: a clone is a copy of a repository. You can clone a remote repository
onto your local machine, or clone a local repository to somewhere else on your
machine. You would clone a repository when you want to contribute / make changes
to that repo and have it stored locally on your machine.

Fork: a fork is a remotely cloned repo - i.e. you clone a remote repo onto your
remote github account. The forked repo is just like a clone of the original, 
but it will also have a link back to the original work. You would fork a repo
when you want to work on / change a repo made by someone else, but where you
aren't a collaborator so cannot change the original repo.

4. What is the benefit of having a copy of the last known state
of the remote stored locally?
Keeps you as up to date as possible with the remote repo if you're
going offline you can still add changes to the most recent version
of the branch. When you come back online this makes it easier to see
what changes others have made while you were offline, and you can
merge your changes with theirs.

A pull request allows you to get people to review your changes before 
merging those changes into the master. You create a new branch with 
some change, then commit and push up to the remote repo. Once there,
you can make a pull request - this will email the owner of the repo
about the pull request. The owner can then review the code of your
new branch, and then if they think it is ready to go, they can pull
it into the master.

5. How would you collaborate without using Git or GitHub? What would be
easier, and what would be harder?
Without git and github I would probably share my code with collaborators
using a drop box or sending code versions by email. This would be easier to
set up and learn (since there basically is no setup / learning involved!)
but it would be much harder to keep track of changes and merge different
peoples work.

6. When would you want to make changes in a seperate branch rather than
directly in master? What benefits does each approach have?
Working in a seperate branch can be helpful if the features you're building
are new / experimental / not stable yet. Working in a seperate branch you
can get these up to standard first before merging them into the master 
branch which is ostensibly production level. The advantage of this is that 
you can experiment and if things go wrong, they dont affect the master, which 
other collaborators may be working on. 
Working directly on the master has the benefit of meaning that all of your code
is as up to date as possible, and has all of the features that may have
been added since a branch was started.