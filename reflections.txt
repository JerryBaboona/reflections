1. Using diff to find bugs:
Command FC on windows to "File Compare" two files. 
By seeing the differences in the two files line by line,
it is easy to spot changes, and subsequently bugs.
Command line comparisons with FC work best if the
lines of the files you are comparing a relatively
short, so they will fit into a command line window.

2. How could having easy access to the entire 
history of a file make you a more efficient programmer
in the long term?
By having access to all your old versions you can 
see what changes you have made to improve code, and 
this may help you remember how you made improved things
in the past so you can improve things moving forward.
You can also see the things that didn't work in the 
past and avoid doing the same things going forward.
Additionally, for bug fixing, by having your old 
versions to hand, you can quickly roll back to a 
stable version and compare the different versions
to identify where the bugs might be.

2.1 Commit frequency
Try to keep commits to one per logical change in your
code. Too many and the history of your code becomes too
long. Too few and the differences between versions 
will become too large. Git allows a short message to
explain what has changed in each commit, and that 
message will be more useful if each commit has a 
single easy to summarise change.

3. Why do some VCSs, like Git, allow saving multiple
files in one commit, while others, like Google Docs, 
treat each file seperately?
Saving multiple files in one commit is useful for 
situations where the files are linked / related in
some way, such that changes in one file may require
changes to another. This is often the case with 
programming projects, hence why Git allows multiple
files in a commit.

4. How can you use the commands git log and git diff 
to view the history of files?
git log provides a histroy of all the commits to the 
repository. You can use this to see who made the commits,
when and what the commit was. You can use git diff to
compare two commits (syntax: git diff commit_id1 (earlier) 
commit_id2 (later)) and see the differences in the 
files between the commits.

4.1 git checkouts are like restoring a previous version.
Checking out a commit means resetting all of your files 
to how they were in that commit. This is essentially like
rolling back to an old version. 

5. How might using version control make you more confident
to make changes that could break something?
Using version control you can always roll back to
earlier, working versions of the code. This means when
you make a change that breaks something, you can roll
back to a stable version to try and make see where it 
went wrong and make the change such that it doesn't
break the code. It allows you to make bigger changes,
and rewrite and rethink methods and architecture that
you wouldn't be able to explore easily and efficiently
without VCS, due to all the potential for introducing
bugs that you can't find.

6. How do I want to use Git?
I want to use Git as a VCS for my web application, to
keep track of versions across multiple files. I think
Git is best practice and will help me improve as a 
programmer.